/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.library.bus.management.system.main;

/**
 *
 * @author HP
 */


import java.sql.Date;
import java.util.List;

public class ReportService {
    
    public static void generateCompleteReport() {
        String currentDateTime = "2025-08-18 06:26:08 UTC";
        String currentUser = "hirushasuhan";
        
        System.out.println("\n" + "=".repeat(95));
        System.out.println("                      BUS MANAGEMENT SYSTEM - COMPLETE REPORT");
        System.out.println("                            Generated on: " + currentDateTime);
        System.out.println("                            Generated by: " + currentUser);
        System.out.println("                          Database: bus_management_system_new");
        System.out.println("=".repeat(95));
        
        generateRouteReport();
        generateBusReport();
        generateScheduleReport();
        generateTodayScheduleReport();
        generateSummaryReport();
        
        System.out.println("=".repeat(95));
        System.out.println("                                END OF REPORT");
        System.out.println("                          System developed by: hirushasuhan");
        System.out.println("                          Report generated at: " + currentDateTime);
        System.out.println("=".repeat(95));
    }
    
    public static void generateRouteReport() {
        System.out.println("\n--- ROUTE INFORMATION ---");
        List<Route> routes = Route.getAllRoutes();
        
        if (routes.isEmpty()) {
            System.out.println("No routes found.");
        } else {
            System.out.printf("%-5s %-35s %-15s %-15s %-10s %-10s %-12s%n",
                    "ID", "Route Name", "Source", "Destination", "Distance", "Type", "Base Fare");
            System.out.println("-".repeat(105));
            
            double totalDistance = 0;
            double totalBaseFare = 0;
            int luxuryRoutes = 0, acRoutes = 0, normalRoutes = 0;
            
            for (Route route : routes) {
                System.out.printf("%-5d %-35s %-15s %-15s %-10.1f %-10s Rs.%-9.2f%n",
                        route.getRouteId(), route.getRouteName(), route.getSource(),
                        route.getDestination(), route.getDistanceKm(), route.getRouteType().toUpperCase(), route.getBaseFare());
                
                totalDistance += route.getDistanceKm();
                totalBaseFare += route.getBaseFare();
                
                switch (route.getRouteType().toLowerCase()) {
                    case "luxury": luxuryRoutes++; break;
                    case "ac": acRoutes++; break;
                    case "normal": normalRoutes++; break;
                }
            }
            System.out.println("-".repeat(105));
            System.out.printf("Total Routes: %d | Coverage: %.1f km | Avg Base Fare: Rs.%.2f%n", 
                    routes.size(), totalDistance, totalBaseFare/routes.size());
            System.out.printf("Route Types - Normal: %d | AC: %d | Luxury: %d%n", normalRoutes, acRoutes, luxuryRoutes);
        }
    }
    
    public static void generateBusReport() {
        System.out.println("\n--- BUS FLEET INFORMATION ---");
        List<Bus> buses = Bus.getAllBuses();
        
        if (buses.isEmpty()) {
            System.out.println("No buses found.");
        } else {
            System.out.printf("%-5s %-12s %-8s %-10s %-20s %-15s %-8s %-12s%n",
                    "ID", "Bus Number", "Capacity", "Type", "Driver Name", "Phone", "Route", "Status");
            System.out.println("-".repeat(110));
            
            int totalCapacity = 0;
            int activeBuses = 0, maintenanceBuses = 0, inactiveBuses = 0;
            int normalBuses = 0, acBuses = 0, luxuryBuses = 0;
            
            for (Bus bus : buses) {
                System.out.printf("%-5d %-12s %-8d %-10s %-20s %-15s %-8d %-12s%n",
                        bus.getBusId(), bus.getBusNumber(), bus.getCapacity(), bus.getBusType().toUpperCase(),
                        bus.getDriverName(), bus.getDriverPhone(), bus.getRouteId(), bus.getStatus().toUpperCase());
                
                totalCapacity += bus.getCapacity();
                
                switch (bus.getStatus().toLowerCase()) {
                    case "active": activeBuses++; break;
                    case "maintenance": maintenanceBuses++; break;
                    case "inactive": inactiveBuses++; break;
                }
                
                switch (bus.getBusType().toLowerCase()) {
                    case "normal": normalBuses++; break;
                    case "ac": acBuses++; break;
                    case "luxury": luxuryBuses++; break;
                }
            }
            System.out.println("-".repeat(110));
            System.out.printf("Total Buses: %d | Active: %d | Maintenance: %d | Inactive: %d%n", 
                    buses.size(), activeBuses, maintenanceBuses, inactiveBuses);
            System.out.printf("Fleet Capacity: %d seats | Bus Types - Normal: %d | AC: %d | Luxury: %d%n", 
                    totalCapacity, normalBuses, acBuses, luxuryBuses);
        }
    }
    
    public static void generateScheduleReport() {
        System.out.println("\n--- ALL SCHEDULES INFORMATION ---");
        List<BusSchedule> schedules = BusSchedule.getAllSchedules();
        
        if (schedules.isEmpty()) {
            System.out.println("No schedules found.");
        } else {
            System.out.printf("%-5s %-12s %-35s %-12s %-12s %-12s %-8s%n",
                    "ID", "Bus Number", "Route", "Departure", "Arrival", "Date", "Seats");
            System.out.println("-".repeat(100));
            
            int totalAvailableSeats = 0;
            for (BusSchedule schedule : schedules) {
                System.out.printf("%-5d %-12s %-35s %-12s %-12s %-12s %-8d%n",
                        schedule.getScheduleId(), schedule.getBusNumber(), 
                        schedule.getSource() + "->" + schedule.getDestination(),
                        schedule.getDepartureTime(), schedule.getArrivalTime(),
                        schedule.getScheduleDate(), schedule.getAvailableSeats());
                totalAvailableSeats += schedule.getAvailableSeats();
            }
            System.out.println("-".repeat(100));
            System.out.printf("Total Schedules: %d | Total Available Seats: %d%n", schedules.size(), totalAvailableSeats);
        }
    }
    
    public static void generateTodayScheduleReport() {
        System.out.println("\n--- TODAY'S SCHEDULES (2025-08-18) ---");
        Date today = Date.valueOf("2025-08-18");
        List<BusSchedule> todaySchedules = BusSchedule.getSchedulesByDate(today);
        
        if (todaySchedules.isEmpty()) {
            System.out.println("No schedules found for today.");
        } else {
            System.out.printf("%-5s %-12s %-35s %-12s %-12s %-8s %-8s%n",
                    "ID", "Bus Number", "Route", "Departure", "Arrival", "Type", "Seats");
            System.out.println("-".repeat(95));
            
            int todayAvailableSeats = 0;
            for (BusSchedule schedule : todaySchedules) {
                System.out.printf("%-5d %-12s %-35s %-12s %-12s %-8s %-8d%n",
                        schedule.getScheduleId(), schedule.getBusNumber(),
                        schedule.getSource() + "->" + schedule.getDestination(),
                        schedule.getDepartureTime(), schedule.getArrivalTime(),
                        schedule.getBusType().toUpperCase(), schedule.getAvailableSeats());
                todayAvailableSeats += schedule.getAvailableSeats();
            }
            System.out.println("-".repeat(95));
            System.out.printf("Today's Schedules: %d | Available Seats Today: %d%n", 
                    todaySchedules.size(), todayAvailableSeats);
        }
    }
    
    private static void generateSummaryReport() {
        System.out.println("\n--- SYSTEM SUMMARY & STATISTICS ---");
        
        List<Route> routes = Route.getAllRoutes();
        List<Bus> buses = Bus.getAllBuses();
        List<BusSchedule> schedules = BusSchedule.getAllSchedules();
        Date today = Date.valueOf("2025-08-18");
        List<BusSchedule> todaySchedules = BusSchedule.getSchedulesByDate(today);
        
        System.out.println("---------------------------------------------");
        System.out.printf("| FLEET OVERVIEW                           |%n");
        System.out.printf("| Total Routes:              %13d |%n", routes.size());
        System.out.printf("| Total Buses:               %13d |%n", buses.size());
        System.out.printf("| Total Schedules:           %13d |%n", schedules.size());
        System.out.printf("| Today's Schedules:         %13d |%n", todaySchedules.size());
        System.out.println("|--------------------------------------------|");
        
        long activeBuses = buses.stream().filter(b -> "active".equals(b.getStatus())).count();
        int totalCapacity = buses.stream().mapToInt(Bus::getCapacity).sum();
        double totalDistance = routes.stream().mapToDouble(Route::getDistanceKm).sum();
        
        System.out.printf("| OPERATIONAL STATUS                       |%n");
        System.out.printf("| Active Buses:              %13d |%n", activeBuses);
        System.out.printf("| Fleet Capacity:            %13d |%n", totalCapacity);
        System.out.printf("| Network Coverage:          %10.1f km |%n", totalDistance);
        
        int todayAvailableSeats = todaySchedules.stream().mapToInt(BusSchedule::getAvailableSeats).sum();
        System.out.printf("| Today's Available Seats:   %13d |%n", todayAvailableSeats);
        System.out.println("---------------------------------------------");
        
        double busUtilization = schedules.size() > 0 ? (double) schedules.size() / buses.size() : 0;
        System.out.println("\nSYSTEM HEALTH INDICATORS:");
        System.out.printf("Bus Utilization Rate: %.1f schedules per bus%n", busUtilization);
        System.out.printf("Fleet Availability: %.1f%% (%d of %d buses active)%n", 
                (double) activeBuses / buses.size() * 100, activeBuses, buses.size());
        
        System.out.println("\nSYSTEM STATUS: OPERATIONAL");
        System.out.println("Last Updated: 2025-08-18 06:26:08 UTC");
        System.out.println("System Administrator: hirushasuhan");
        System.out.println("Database: MySQL 8.0 - Connected");
        System.out.println("Application: Java 8 Maven - Running");
    }
}